<?xml version='1.0' encoding='utf-8'?>
<package xmlns="http://www.idpf.org/2007/opf" unique-identifier="uuid_id">
    <metadata xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:opf="http://www.idpf.org/2007/opf">
        <dc:identifier opf:scheme="calibre" id="calibre_id">38</dc:identifier>
        <dc:identifier opf:scheme="uuid" id="uuid_id">36826d7b-8969-41de-a303-5bb21579d1c1</dc:identifier>
        <dc:title>Java and SOAP</dc:title>
        <dc:creator opf:file-as="Englander, Robert" opf:role="aut">Robert Englander</dc:creator>
        <dc:contributor opf:file-as="calibre" opf:role="bkp">calibre (0.8.38) [http://calibre-ebook.com]</dc:contributor>
        <dc:date>2002-05-14T16:00:00+00:00</dc:date>
        <dc:description>&lt;p class="description"&gt;Java and SOAP provides Java developers with an in-depth look at SOAP (the Simple Object Access Protocol).  Of course, it covers the basics: what SOAP is, why it's soared to a spot on the Buzzwords' Top Ten list, and what its features and capabilities are.  And it shows you how to work with some of the more common Java APIs in the SOAP world: Apache SOAP and GLUE. In addition to covering the basics such as the structure of a SOAP message, SOAP encoding, and building simple services using RPC and messaging, Java and SOAP covers many topics that are essential to real-world development.  Although SOAP has native support for an impressive number of object types, the nature of modern programming means that whatever SOAP gives you is not enough.  When do you need to add support for your own object types, and how do you do it? How do you handle errors, and how do you add your own information to Fault messages?  How do you handle attachments? In an ideal world, you could live entirely within Java, and ignore the SOAP messages being send back and forth: you'd be able to write Java code and let the SOAP APIs work behind the scenes. However, we're not yet in that ideal world, and won't be for some time. Therefore, Java and SOAP pays particular attention to how SOAP messages are encoded.  It doesn't just explain the document types, but shows how the documents are used in practice as they are generated by the different APIs.  If you ever have to debug interoperability problems, you'll find that this information is indispensable. We've always found that the best software is written by people who understand what's happening under the hood.  SOAP is no different.  Let's say you need to write a custom serializer to create a SOAP representation of a structure.  How do you know that your encoding is efficient?  There's one definitive answer: look at the SOAP documents it produces! Java and SOAP also discusses interoperability between the major SOAP platforms, including Microsoft's .NET, SOAP messaging, SOAP attachments, message routing, and a preview of the forthcoming AXIS APIs and server.  If you're a Java developer who would like to start working with SOAP, this is the book you need to get going.&lt;/p&gt;</dc:description>
        <dc:publisher>O'Reilly Media</dc:publisher>
        <dc:identifier opf:scheme="DOUBAN">2370818</dc:identifier>
        <dc:identifier opf:scheme="AMAZON">0596001754</dc:identifier>
        <dc:identifier opf:scheme="ISBN">0596001754</dc:identifier>
        <dc:language>eng</dc:language>
        <dc:subject>java</dc:subject>
        <dc:subject>soap</dc:subject>
        <meta content="{&quot;Robert Englander&quot;: &quot;&quot;}" name="calibre:author_link_map"/>
        <meta content="6" name="calibre:rating"/>
        <meta content="2013-06-04T05:02:17+00:00" name="calibre:timestamp"/>
        <meta content="Java and SOAP" name="calibre:title_sort"/>
    </metadata>
    <guide>
        <reference href="cover.jpg" type="cover" title="封面"/>
    </guide>
</package>
